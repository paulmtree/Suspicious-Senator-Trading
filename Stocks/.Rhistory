stock_price_df[nrow(stock_price_df) + 1,] <- row_total
}
save_location = paste(data_collection_name, df_name, sep="")
write_csv(stock_price_df, save_location)
}
#download from list of stocks
#change df_name and stock_df to splitlist$a if you wish to split the downloading
df_name = "/stock_price_dftot.csv"
stock_df = comp_list_total
download_stocks(stock_df, df_name)
library(quantmod)
library(TTR)
library(ggplot2)
library(dplyr)
library(tidyquant)
library(plyr)
library(readr)
#Set these to get desired day away from transaction date
#=============
data_collection_name = "One Month"
future_date_var = 31
#=============
file_name = "date_ticker_df.csv"
comp_list_total <- read.csv(file_name)
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#split up the company list into 5 parts, hopefully R Studio can handle the smaller batches
split_list <- split(comp_list_total, c("a", "b", "c", "d", "e"))
dir.create(data_collection_name)
error_list <- c()
error_list <- c(error_list, "Blank")
#getSymbols("Fox", from = "02-02-2019")
#initialize empty dataframe with values we wish to extract
df_test <- data.frame(date=character(),
ticker=character(),
Open=numeric(),
High=numeric(),
Low=numeric(),
Close=numeric(),
Volume=numeric(),
Adjusted=numeric(),
Error_message=character(),
stringsAsFactors = FALSE)
#extract dates, change to date object, and add a day for the from-to range
date_test <- as.character(comp_list_total$transaction_date[1])
date_test
date_test2 <- as.Date(date_test, "%m-%d-%Y")
date_test2
date_test3 <- date_test2 + 1
#retrieve ticker symbol and get single row of price data
ticker_test <- as.character(comp_list_total$ticker[1])
try_cond <- try(row_test <- getSymbols(ticker_test, from = date_test2, to = date_test3, auto.assign = FALSE), TRUE)
class(try_cond)
#add price data to date and ticker name, then add to empty dataframe
n = c(date_test, ticker_test)
row_total = c(n, row_test)
row_total = c(row_total, try_cond)
df_test[nrow(df_test) + 1,] <- row_total
df_test
#combining vectors has coerced them to characters, fix at the end with entire columns
download_stocks <- function(comp_list, df_name){
##Checking functions for cleaning the data
#Function that returns TRUE if the df has na values and FALSE if it has no NA values
has_na <- function(stock_df){
if(any(is.na(stock_df))){
return(TRUE)
} else {
return(FALSE)
}
}
#Function that returns TRUE if columns match the company name (correct data) and FALSE if they do not match
column_matches <- function(company, stock_df){
#If column name matches, then check if it has any NAs
paste(company, ".Close") %>%
gsub(" ", "", .) -> c_name
if(c_name %in% colnames(stock_df)){
return(TRUE)
}
else {
return(FALSE)
}
}
#Function that returns True if there is more than 0 rows, False if there is no row
has_rows <- function(stock_df){
if(nrow(stock_df) < 1){
return(FALSE)
} else {
return(TRUE)
}
}
#Function that returns TRUE if there is a column with several zeroes, currently not being used
has_zeroes <- function(stock_df){
for(i in 1:ncol(stock_df)){
print(sum(stock_df[ ,i] == 0))
if (sum(stock_df[ ,i] == 0) >= 5){
return(TRUE)
}
}
return(FALSE)
}
#Function that returns TRUE if all conditions are met
correct_data <- function(company, stock_df){
if((column_matches(company, stock_df) == TRUE) & (has_na(stock_df) == FALSE) & (has_rows(stock_df) == TRUE)){
return(TRUE)
} else {
return(FALSE)
}
}
##This is where the function to download stock data starts
stock_price_df <- data.frame(date=character(),
ticker=character(),
id=character(),
Open=numeric(),
High=numeric(),
Low=numeric(),
Close=numeric(),
Volume=numeric(),
Adjusted=numeric(),
Error_message=character(),
stringsAsFactors = FALSE)
#Change # of cycles: cycles determines how many retries downloading a stock gets
cycles <- 2
stock_tickers <- comp_list$ticker
ids <- comp_list$id
dates <- comp_list$transaction_date
total_length <- nrow(comp_list)
##===========
#new_date <- comp_list$date_1_week
##===========
for (j in 1:nrow(comp_list)){
#Display percentage to completion
print(paste(j / total_length, "%", sep = ""))
#extract dates and id, change to date object
date_char <- as.character(dates[j])
id <- as.character(ids[j])
date_obj <- as.Date(date_char, "%m-%d-%Y") + future_date_var
#retrieve ticker symbol and get single row of price data
ticker <- as.character(stock_tickers[j])
try_cond <- try(row_prices <- getSymbols(ticker, from = date_obj, to = date_obj + 1, auto.assign = FALSE), TRUE)
#replace zeroes with NA so they turn up as errors
try(row_prices[row_prices == 0] <- NA)
#If there is an error downloading or an error in the csv file, try redownloading it until it's fine or until you pass the number of cycles
if ((class(try_cond) == "try-error") | correct_data(ticker, row_prices) == FALSE){
count <- 0
while(((class(try_cond) == "try-error") |
correct_data(ticker, row_prices) == FALSE) &
count <= cycles){
try_cond <- try(row_prices <- getSymbols(ticker, from = date_obj, to = date_obj + 1, auto.assign = FALSE), TRUE)
count <- count + 1
}
}
#If there is still an error, store the error message in the dataframe column, Error_message
if(class(try_cond) == "try-error"){
row_total = c(date_char, ticker, id, row_prices, try_cond)
} else {
row_total = c(date_char, ticker, id, row_prices, "None")
}
#add price data to date and ticker name, then add to empty dataframe
stock_price_df[nrow(stock_price_df) + 1,] <- row_total
}
save_location = paste(data_collection_name, df_name, sep="")
write_csv(stock_price_df, save_location)
}
#download from list of stocks
#change df_name and stock_df to splitlist$a if you wish to split the downloading
df_name = "/stock_price_dftot.csv"
stock_df = comp_list_total
download_stocks(stock_df, df_name)
download_stocks <- function(comp_list, df_name){
##Checking functions for cleaning the data
#Function that returns TRUE if the df has na values and FALSE if it has no NA values
has_na <- function(stock_df){
if(any(is.na(stock_df))){
return(TRUE)
} else {
return(FALSE)
}
}
#Function that returns TRUE if columns match the company name (correct data) and FALSE if they do not match
column_matches <- function(company, stock_df){
#If column name matches, then check if it has any NAs
paste(company, ".Close") %>%
gsub(" ", "", .) -> c_name
if(c_name %in% colnames(stock_df)){
return(TRUE)
}
else {
return(FALSE)
}
}
#Function that returns True if there is more than 0 rows, False if there is no row
has_rows <- function(stock_df){
if(nrow(stock_df) < 1){
return(FALSE)
} else {
return(TRUE)
}
}
#Function that returns TRUE if there is a column with several zeroes, currently not being used
has_zeroes <- function(stock_df){
for(i in 1:ncol(stock_df)){
print(sum(stock_df[ ,i] == 0))
if (sum(stock_df[ ,i] == 0) >= 5){
return(TRUE)
}
}
return(FALSE)
}
#Function that returns TRUE if all conditions are met
correct_data <- function(company, stock_df){
if((column_matches(company, stock_df) == TRUE) & (has_na(stock_df) == FALSE) & (has_rows(stock_df) == TRUE)){
return(TRUE)
} else {
return(FALSE)
}
}
##This is where the function to download stock data starts
stock_price_df <- data.frame(date=character(),
ticker=character(),
id=character(),
Open=numeric(),
High=numeric(),
Low=numeric(),
Close=numeric(),
Volume=numeric(),
Adjusted=numeric(),
Error_message=character(),
stringsAsFactors = FALSE)
#Change # of cycles: cycles determines how many retries downloading a stock gets
cycles <- 2
stock_tickers <- comp_list$ticker
ids <- comp_list$id
dates <- comp_list$transaction_date
total_length <- nrow(comp_list)
##===========
#new_date <- comp_list$date_1_week
##===========
for (j in 1:nrow(comp_list)){
#Display percentage to completion
print(paste(j / total_length, "%", sep = ""))
#extract dates and id, change to date object
date_char <- as.character(dates[j])
id <- as.character(ids[j])
date_obj <- as.Date(date_char, "%m-%d-%Y") + future_date_var
#retrieve ticker symbol and get single row of price data
ticker <- as.character(stock_tickers[j])
try_cond <- try(row_prices <- getSymbols(ticker, from = date_obj, to = date_obj + 1, auto.assign = FALSE), TRUE)
#replace zeroes with NA so they turn up as errors
try(row_prices[row_prices == 0] <- NA)
#If there is an error downloading or an error in the csv file, try redownloading it until it's fine or until you pass the number of cycles
if ((class(try_cond) == "try-error") | correct_data(ticker, row_prices) == FALSE){
count <- 0
while(((class(try_cond) == "try-error") |
correct_data(ticker, row_prices) == FALSE) &
count <= cycles){
try_cond <- try(row_prices <- getSymbols(ticker, from = date_obj, to = date_obj + 1, auto.assign = FALSE), TRUE)
count <- count + 1
}
}
#If there is still an error, store the error message in the dataframe column, Error_message
if(class(try_cond) == "try-error"){
row_total = c(date_char, ticker, id, row_prices, try_cond)
} else {
row_total = c(date_char, ticker, id, row_prices, "None")
}
#add price data to date and ticker name, then add to empty dataframe
stock_price_df[nrow(stock_price_df) + 1,] <- row_total
}
save_location = paste(data_collection_name, df_name, sep="")
write_csv(stock_price_df, save_location)
}
#download from list of stocks
#change df_name and stock_df to splitlist$a if you wish to split the downloading
df_name = "/stock_price_dfa.csv"
stock_df = split_list$a
download_stocks(stock_df, df_name)
download_stocks <- function(comp_list, df_name){
##Checking functions for cleaning the data
#Function that returns TRUE if the df has na values and FALSE if it has no NA values
has_na <- function(stock_df){
if(any(is.na(stock_df))){
return(TRUE)
} else {
return(FALSE)
}
}
#Function that returns TRUE if columns match the company name (correct data) and FALSE if they do not match
column_matches <- function(company, stock_df){
#If column name matches, then check if it has any NAs
paste(company, ".Close") %>%
gsub(" ", "", .) -> c_name
if(c_name %in% colnames(stock_df)){
return(TRUE)
}
else {
return(FALSE)
}
}
#Function that returns True if there is more than 0 rows, False if there is no row
has_rows <- function(stock_df){
if(nrow(stock_df) < 1){
return(FALSE)
} else {
return(TRUE)
}
}
#Function that returns TRUE if there is a column with several zeroes, currently not being used
has_zeroes <- function(stock_df){
for(i in 1:ncol(stock_df)){
print(sum(stock_df[ ,i] == 0))
if (sum(stock_df[ ,i] == 0) >= 5){
return(TRUE)
}
}
return(FALSE)
}
#Function that returns TRUE if all conditions are met
correct_data <- function(company, stock_df){
if((column_matches(company, stock_df) == TRUE) & (has_na(stock_df) == FALSE) & (has_rows(stock_df) == TRUE)){
return(TRUE)
} else {
return(FALSE)
}
}
##This is where the function to download stock data starts
stock_price_df <- data.frame(date=character(),
ticker=character(),
id=character(),
Open=numeric(),
High=numeric(),
Low=numeric(),
Close=numeric(),
Volume=numeric(),
Adjusted=numeric(),
Error_message=character(),
stringsAsFactors = FALSE)
#Change # of cycles: cycles determines how many retries downloading a stock gets
cycles <- 2
stock_tickers <- comp_list$ticker
ids <- comp_list$id
dates <- comp_list$transaction_date
total_length <- nrow(comp_list)
##===========
#new_date <- comp_list$date_1_week
##===========
for (j in 1:nrow(comp_list)){
#Display percentage to completion
print(paste(j / total_length, "%", sep = ""))
#extract dates and id, change to date object
date_char <- as.character(dates[j])
id <- as.character(ids[j])
date_obj <- as.Date(date_char, "%m-%d-%Y") + future_date_var
#retrieve ticker symbol and get single row of price data
ticker <- as.character(stock_tickers[j])
try_cond <- try(row_prices <- getSymbols(ticker, from = date_obj, to = date_obj + 1, auto.assign = FALSE), TRUE)
#replace zeroes with NA so they turn up as errors
try(row_prices[row_prices == 0] <- NA)
#If there is an error downloading or an error in the csv file, try redownloading it until it's fine or until you pass the number of cycles
if ((class(try_cond) == "try-error") | correct_data(ticker, row_prices) == FALSE){
count <- 0
while(((class(try_cond) == "try-error") |
correct_data(ticker, row_prices) == FALSE) &
count <= cycles){
try_cond <- try(row_prices <- getSymbols(ticker, from = date_obj, to = date_obj + 1, auto.assign = FALSE), TRUE)
count <- count + 1
}
}
#If there is still an error, store the error message in the dataframe column, Error_message
if(class(try_cond) == "try-error"){
row_total = c(date_char, ticker, id, row_prices, try_cond)
} else {
row_total = c(date_char, ticker, id, row_prices, "None")
}
#add price data to date and ticker name, then add to empty dataframe
stock_price_df[nrow(stock_price_df) + 1,] <- row_total
}
save_location = paste(data_collection_name, df_name, sep="")
write_csv(stock_price_df, save_location)
}
#download from list of stocks
#change df_name and stock_df to splitlist$a if you wish to split the downloading
df_name = "/stock_price_dfa.csv"
stock_df = split_list$a
stock_df
#download_stocks(stock_df, df_name)
download_stocks <- function(comp_list, df_name){
##Checking functions for cleaning the data
#Function that returns TRUE if the df has na values and FALSE if it has no NA values
has_na <- function(stock_df){
if(any(is.na(stock_df))){
return(TRUE)
} else {
return(FALSE)
}
}
#Function that returns TRUE if columns match the company name (correct data) and FALSE if they do not match
column_matches <- function(company, stock_df){
#If column name matches, then check if it has any NAs
paste(company, ".Close") %>%
gsub(" ", "", .) -> c_name
if(c_name %in% colnames(stock_df)){
return(TRUE)
}
else {
return(FALSE)
}
}
#Function that returns True if there is more than 0 rows, False if there is no row
has_rows <- function(stock_df){
if(nrow(stock_df) < 1){
return(FALSE)
} else {
return(TRUE)
}
}
#Function that returns TRUE if there is a column with several zeroes, currently not being used
has_zeroes <- function(stock_df){
for(i in 1:ncol(stock_df)){
print(sum(stock_df[ ,i] == 0))
if (sum(stock_df[ ,i] == 0) >= 5){
return(TRUE)
}
}
return(FALSE)
}
#Function that returns TRUE if all conditions are met
correct_data <- function(company, stock_df){
if((column_matches(company, stock_df) == TRUE) & (has_na(stock_df) == FALSE) & (has_rows(stock_df) == TRUE)){
return(TRUE)
} else {
return(FALSE)
}
}
##This is where the function to download stock data starts
stock_price_df <- data.frame(date=character(),
ticker=character(),
id=character(),
Open=numeric(),
High=numeric(),
Low=numeric(),
Close=numeric(),
Volume=numeric(),
Adjusted=numeric(),
Error_message=character(),
stringsAsFactors = FALSE)
#Change # of cycles: cycles determines how many retries downloading a stock gets
cycles <- 2
stock_tickers <- comp_list$ticker
ids <- comp_list$id
dates <- comp_list$transaction_date
total_length <- nrow(comp_list)
##===========
#new_date <- comp_list$date_1_week
##===========
for (j in 1:nrow(comp_list)){
#Display percentage to completion
print(paste(j / total_length, "%", sep = ""))
#extract dates and id, change to date object
date_char <- as.character(dates[j])
id <- as.character(ids[j])
date_obj <- as.Date(date_char, "%m-%d-%Y") + future_date_var
#retrieve ticker symbol and get single row of price data
ticker <- as.character(stock_tickers[j])
try_cond <- try(row_prices <- getSymbols(ticker, from = date_obj, to = date_obj + 1, auto.assign = FALSE), TRUE)
#replace zeroes with NA so they turn up as errors
try(row_prices[row_prices == 0] <- NA)
#If there is an error downloading or an error in the csv file, try redownloading it until it's fine or until you pass the number of cycles
if ((class(try_cond) == "try-error") | correct_data(ticker, row_prices) == FALSE){
count <- 0
while(((class(try_cond) == "try-error") |
correct_data(ticker, row_prices) == FALSE) &
count <= cycles){
try_cond <- try(row_prices <- getSymbols(ticker, from = date_obj, to = date_obj + 1, auto.assign = FALSE), TRUE)
count <- count + 1
}
}
#If there is still an error, store the error message in the dataframe column, Error_message
if(class(try_cond) == "try-error"){
row_total = c(date_char, ticker, id, row_prices, try_cond)
} else {
row_total = c(date_char, ticker, id, row_prices, "None")
}
#add price data to date and ticker name, then add to empty dataframe
stock_price_df[nrow(stock_price_df) + 1,] <- row_total
}
save_location = paste(data_collection_name, df_name, sep="")
write_csv(stock_price_df, save_location)
}
#download from list of stocks
#change df_name and stock_df to splitlist$a if you wish to split the downloading
df_name = "/stock_price_dftot.csv"
stock_df = comp_list_total
download_stocks(stock_df, df_name)
#initialize empty dataframe with values we wish to extract
df_test <- data.frame(date=character(),
ticker=character(),
Open=numeric(),
High=numeric(),
Low=numeric(),
Close=numeric(),
Volume=numeric(),
Adjusted=numeric(),
Error_message=character(),
stringsAsFactors = FALSE)
#extract dates, change to date object, and add a day for the from-to range
date_test <- as.character(comp_list_total$transaction_date[1])
date_test
date_test2 <- as.Date(date_test, "%m-%d-%Y") + future_date_var
date_test2
date_test3 <- date_test2 + 1
#retrieve ticker symbol and get single row of price data
ticker_test <- as.character(comp_list_total$ticker[1])
try_cond <- try(row_test <- getSymbols(ticker_test, from = date_test2, to = date_test3, auto.assign = FALSE), TRUE)
